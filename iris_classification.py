# -*- coding: utf-8 -*-
"""iris_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RjWetIAGApNUemC0p8Ri1gPLHPYSgaM_

### Dataset:
Fisher, R. (1936). Iris [Dataset]. UCI Machine Learning Repository. https://doi.org/10.24432/C56C76.

### Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler,normalize
from imblearn.over_sampling import RandomOverSampler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import tensorflow as tf

"""### Preprocessing"""

cols = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
df = pd.read_csv('iris.data', names=cols)
df['class'] = df['class'].map({'Iris-setosa':0, 'Iris-versicolor':1, 'Iris-virginica':2})
train, val, test = np.split(df.sample(frac=1), [int(.6*len(df)), int(.8*len(df))])

def scale_dataset(dataframe):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  data = np.hstack((X, np.reshape(y, (-1, 1))))

  return data, X, y

train, X_train, y_train = scale_dataset(train)
val, X_val, y_val = scale_dataset(val)
test, X_test, y_test = scale_dataset(test)
y_train = tf.keras.utils.to_categorical(y_train)
y_val = tf.keras.utils.to_categorical(y_val)
y_test = tf.keras.utils.to_categorical(y_test)

"""### Neural Network"""

def train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs):
  nn_model = tf.keras.Sequential([
    tf.keras.layers.Dense(num_nodes, activation="sigmoid", input_shape=(4,)),
    tf.keras.layers.Dropout(dropout_prob),
    tf.keras.layers.Dense(num_nodes, activation="sigmoid"),
    tf.keras.layers.Dropout(dropout_prob),
    tf.keras.layers.Dense(3, activation="softmax")
  ])

  nn_model.compile(optimizer=tf.keras.optimizers.Adam(lr), loss='categorical_crossentropy',
                   metrics=['accuracy'])
  history = nn_model.fit(
      X_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.2, verbose=0
  )
  return history, nn_model

epochs = 10
least_val_loss = float('inf')
least_loss_model = None
for num_nodes in [16, 32, 64]:
  for dropout_prob in [0, 0.2]:
    for lr in [0.01, 0.005, 0.001]:
      for batch_size in [32, 64, 128]:
        history, model = train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs)
        val_loss = model.evaluate(X_val, y_val)[0]
        print(f"{num_nodes} nodes, dropout {dropout_prob}, lr {lr}, batch size {batch_size}, val loss {val_loss}")
        if val_loss < least_val_loss:
          least_val_loss = val_loss
          least_loss_model = model

y_pred = least_loss_model.predict(X_test)
y_pred = np.round(y_pred)
print(classification_report(y_test, y_pred))

